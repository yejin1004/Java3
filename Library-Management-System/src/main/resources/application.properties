@Mapper
public interface MemberMapper {
int insertMember(Member member);
Member selectMemberById(Long memberId);
List<Member> selectMemberList(@Param("offset") int offset, @Param("limit") int limit, @Param("search") String search);
int updateMember(Member member);
int deleteMember(Long memberId);
int countByEmail(String email);
}

@Service
@RequiredArgsConstructor
public class MemberService {
private final MemberMapper memberMapper;

public Member register(Member member) {
if (memberMapper.countByEmail(member.getEmail()) > 0) {
throw new IllegalArgumentException("?? ?? ?? ??????.");
}
memberMapper.insertMember(member);
return member;
}

public Member getMember(Long id) {
return memberMapper.selectMemberById(id);
}

public List<Member> getMemberList(int page, int size, String search) {
int offset = (page - 1) * size;
return memberMapper.selectMemberList(offset, size, search);
}

public Member updateMember(Long id, Member member) {
member.setMemberId(id);
memberMapper.updateMember(member);
return memberMapper.selectMemberById(id);
}

public void deleteMember(Long id) {
memberMapper.deleteMember(id);
}

public boolean isEmailDuplicate(String email) {
return memberMapper.countByEmail(email) > 0;
}
}

@RestController
@RequestMapping("/api/members")
@RequiredArgsConstructor
public class MemberController {
private final MemberService memberService;

@PostMapping
public ResponseEntity<Member> register(@RequestBody Member member) {
return ResponseEntity.ok(memberService.register(member));
}

@GetMapping("/{id}")
public ResponseEntity<Member> getMember(@PathVariable Long id) {
return ResponseEntity.ok(memberService.getMember(id));
}

@GetMapping
public ResponseEntity<List<Member>> getMemberList(
@RequestParam(defaultValue = "1") int page,
@RequestParam(defaultValue = "10") int size,
@RequestParam(required = false) String search) {
return ResponseEntity.ok(memberService.getMemberList(page, size, search));
}

@PutMapping("/{id}")
public ResponseEntity<Member> updateMember(@PathVariable Long id, @RequestBody Member member) {
return ResponseEntity.ok(memberService.updateMember(id, member));
}

@DeleteMapping("/{id}")
public ResponseEntity<Void> deleteMember(@PathVariable Long id) {
memberService.deleteMember(id);
return ResponseEntity.noContent().build();
}

@GetMapping("/check-email")
public ResponseEntity<Boolean> checkEmail(@RequestParam String email) {
    return ResponseEntity.ok(memberService.isEmailDuplicate(email));
    }
}

